Since the protections provided by RLbox depends largely on the proper implementation of the `tainted`,`untainted`, and related verification procedures, developer who do not properly follow this process will still leave their libraries open to attack. For example, RLbox has inherent support for the `unsafeVerified` function, which verifies a data value without any checks. If these are not properly replaced in the production version of the library, no additional security is guaranteed. Additionally, developers can also do too little in terms of verifying that a data value is safe (e.g. by enforcing only size constraints like length of an image array but not checking if the values inside the pixel array actually matches some allowed range). Furthermore, developers can deliberate/undeliberately use unsafe C++ constructions like `reinterpret_cast` that would circumvent the RLbox wrappers, thus rendering them ineffective.

For these issues, it may be possible to extend RLbox to allow switching between a weaker verification procedure (e.g. allowing unsafeVerified) for a developer mode but disallow these functions to actually be in production code. Also there needs to be perhaps a more rigorous standard for how tainted values are verified, as I don't think developers, especially for already weakly secured libraries can be fully trusted to follow these procedures.